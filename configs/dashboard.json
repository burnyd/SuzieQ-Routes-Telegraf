{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": "-- Grafana --",
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "id": 5,
    "iteration": 1701024786993,
    "links": [],
    "panels": [
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 2,
          "x": 0,
          "y": 0
        },
        "id": 2,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ceos1\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"connected\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Connected Routes ceos1",
        "type": "gauge"
      },
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 2,
          "x": 2,
          "y": 0
        },
        "id": 4,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ceos1\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"connected\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Connected Routes ceos1",
        "type": "gauge"
      },
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 2,
          "x": 0,
          "y": 7
        },
        "id": 5,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ceos1\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"ospf\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "OSPF Routes ceos1",
        "type": "gauge"
      },
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 2,
          "x": 2,
          "y": 7
        },
        "id": 6,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ceos1\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"ospf\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "OSPF Routes ceos1",
        "type": "gauge"
      },
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 5,
          "w": 2,
          "x": 0,
          "y": 13
        },
        "id": 7,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ebgp\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"ospf\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "ebgp Routes ceos1",
        "type": "gauge"
      },
      {
        "datasource": "Flux",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 5,
          "w": 2,
          "x": 2,
          "y": 13
        },
        "id": 3,
        "options": {
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showThresholdLabels": false,
          "showThresholdMarkers": true,
          "text": {}
        },
        "pluginVersion": "7.4.3",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"NetworkRoutes\")\n  |> filter(fn: (r) => r[\"Device\"] == \"ceos2\")\n  |> filter(fn: (r) => r[\"RoutingProtocol\"] == \"ebgp\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> distinct(column: \"_value\") // Use the column name you want to count as unique\n  |> count() // Count unique values\n  |> group(columns: []) // Group by nothing to get the total count\n  |> count() // Count total values\n  |> sum(column: \"_value\") // Sum the total counts\n  |> yield(name: \"total_sum\")",
            "queryType": "randomWalk",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "OSPF Routes ceos2",
        "type": "gauge"
      }
    ],
    "schemaVersion": 27,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": [
        {
          "allValue": null,
          "current": {
            "selected": false,
            "text": "All",
            "value": "$__all"
          },
          "datasource": "Flux",
          "definition": " from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> group(columns: [\"Device\"])\n  |> distinct(column: \"Device\")\n  |> map(fn: (r) => ({device: r._value}))",
          "description": null,
          "error": null,
          "hide": 0,
          "includeAll": true,
          "label": "device",
          "multi": true,
          "name": "device",
          "options": [
            {
              "selected": false,
              "text": "All",
              "value": "$__all"
            }
          ],
          "query": " from(bucket: \"sq\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> group(columns: [\"Device\"])\n  |> distinct(column: \"Device\")\n  |> map(fn: (r) => ({device: r._value}))",
          "refresh": 0,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        }
      ]
    },
    "time": {
      "from": "now-6h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Routes Dashboard Copy",
    "uid": "c0ZjIDNSk",
    "version": 1
  }